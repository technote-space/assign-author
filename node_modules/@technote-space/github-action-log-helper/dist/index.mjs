import { info, debug, error, warning, startGroup, endGroup } from '@actions/core';
import { sprintf } from 'sprintf-js';

/* eslint-disable @typescript-eslint/no-explicit-any */
const COLOR_MAP = {
    'black': 0,
    'red': 1,
    'green': 2,
    'yellow': 3,
    'blue': 4,
    'magenta': 5,
    'cyan': 6,
    'white': 7,
};
const ATTRIBUTE_MAP = {
    'none': 0,
    'bold': 1,
    'underline': 4,
    'italic': 3,
};
const split = (value) => value.split(/\r?\n/);
/**
 * Logger
 */
class Logger {
    /**
     * @param {function|undefined} replacer replacer
     * @param {boolean} notUseGroup not use group?
     */
    constructor(replacer, notUseGroup = false) {
        Object.defineProperty(this, "notUseGroup", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: notUseGroup
        });
        Object.defineProperty(this, "replacer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * @param {string} message message
         * @return {string[]} messages
         */
        Object.defineProperty(this, "splitMessage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (message) => split(message.replace(/\r?\n$/, ''))
        });
        /**
         * @param {string} message message
         * @param {any[]} args args
         * @return {string} output string
         */
        Object.defineProperty(this, "getOutputString", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (message, ...args) => args.length ? sprintf(this.replacer(message), ...args.map(arg => 'string' === typeof arg ? this.replacer(arg) : arg)) : this.replacer(message)
        });
        /**
         * @param {function} output output function
         * @param {function|null} replacer replacer
         * @param {string|string[]} message message
         * @param {any[]} args args
         */
        Object.defineProperty(this, "multiLineOutput", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (output, replacer, message, ...args) => {
                if (!message) {
                    output('');
                    return;
                }
                if ('string' !== typeof message) {
                    message.forEach(message => {
                        this.multiLineOutput(output, replacer, message, ...args);
                    });
                    return;
                }
                this.splitMessage(message).forEach(message => output(this.getOutputString(replacer ? replacer(message) : message, ...args)));
            }
        });
        /**
         * @param {string|string[]} message message
         * @param {any[]} args args
         * @return {void}
         */
        Object.defineProperty(this, "log", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (message, ...args) => this.multiLineOutput(info, null, message, ...args)
        });
        /**
         * @param {string|string[]} message message
         * @param {any[]} args args
         * @return {void}
         */
        Object.defineProperty(this, "info", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (message, ...args) => this.multiLineOutput(info, message => `> ${message}`, message, ...args)
        });
        /**
         * @param {string|string[]} message message
         * @param {any[]} args args
         * @return {void}
         */
        Object.defineProperty(this, "debug", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (message, ...args) => this.multiLineOutput(debug, null, message, ...args)
        });
        /**
         * @param {string|string[]} message message
         * @param {any[]} args args
         * @return {void}
         */
        Object.defineProperty(this, "error", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (message, ...args) => this.multiLineOutput(error, null, message, ...args)
        });
        /**
         * @param {string|string[]} message message
         * @param {any[]} args args
         * @return {void}
         */
        Object.defineProperty(this, "warn", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (message, ...args) => this.multiLineOutput(warning, null, message, ...args)
        });
        /**
         * @param {string|string[]} message message
         * @param {any[]} args args
         * @return {void}
         */
        Object.defineProperty(this, "displayCommand", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (message, ...args) => this.multiLineOutput(info, message => `[command]${message}`, message, ...args)
        });
        /**
         * @param {string|string[]} message message
         * @return {void}
         */
        Object.defineProperty(this, "displayStdout", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (message) => this.multiLineOutput(info, message => `  >> ${message}`, message)
        });
        /**
         * @param {string|string[]} message message
         * @return {void}
         */
        Object.defineProperty(this, "displayStderr", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (message) => this.multiLineOutput(warning, message => `  >> ${message}`, message)
        });
        /**
         * @param {string} message message
         * @param {any[]} args args
         * @return {void}
         */
        Object.defineProperty(this, "startProcess", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (message, ...args) => {
                if (this.notUseGroup) {
                    this.info(message, ...args);
                    return;
                }
                this.endProcess();
                startGroup(this.getOutputString(message, ...args));
                Logger.isRequiredEndGroup = true;
            }
        });
        /**
         * @return {void}
         */
        Object.defineProperty(this, "endProcess", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: () => {
                if (this.notUseGroup) {
                    return;
                }
                if (Logger.isRequiredEndGroup) {
                    endGroup();
                    Logger.isRequiredEndGroup = false;
                }
            }
        });
        /**
         * @param {string} string string
         * @param {Setting|undefined} setting setting
         * @return {string} color string
         */
        Object.defineProperty(this, "getColorString", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (string, setting) => {
                const color = setting?.color ?? 'white';
                const backColor = setting?.backColor ?? 'black';
                const attribute = setting?.attribute ?? 'none';
                if (attribute !== 'none') {
                    return sprintf('\x1b[3%d;4%d;%dm%s\x1b[0m', COLOR_MAP[color], COLOR_MAP[backColor], ATTRIBUTE_MAP[attribute], string);
                }
                return sprintf('\x1b[3%d;4%dm%s\x1b[0m', COLOR_MAP[color], COLOR_MAP[backColor], string);
            }
        });
        /**
         * @param {string} string string
         * @param {Setting|undefined} setting setting
         * @return {string} color string
         */
        Object.defineProperty(this, "c", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (string, setting) => this.getColorString(string, setting)
        }); // eslint-disable-line id-length
        this.replacer = replacer ? replacer : (text) => text;
    }
}
Object.defineProperty(Logger, "isRequiredEndGroup", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: false
});
/**
 * @return {void}
 */
Object.defineProperty(Logger, "resetForTesting", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: () => {
        Logger.isRequiredEndGroup = false;
    }
});

export { Logger };
