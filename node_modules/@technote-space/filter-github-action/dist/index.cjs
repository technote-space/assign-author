'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core = require('@actions/core');

const getLabels = (context) => {
    if ('issues' === context.eventName) {
        return context.payload.issue && 'labels' in context.payload.issue ? context.payload.issue.labels.map(label => label.name) : false;
    }
    if ('pull_request' === context.eventName || 'pull_request_target' === context.eventName) {
        return context.payload.pull_request && 'labels' in context.payload.pull_request ? context.payload.pull_request.labels.map(label => label.name) : false;
    }
    return [];
};

const getBoolValue = (input) => !['false', '0', '', 'no', 'n'].includes(input.trim().toLowerCase());
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const isTargetEventName = (events, context, options) => {
    if ('*' in events) {
        return true;
    }
    if (!options?.notCheckWorkflowRun && !('workflow_run' in events) && 'workflow_run' === context.eventName) {
        events['workflow_run'] = '*';
    }
    if (!options?.notCheckPrTarget && 'pull_request' in events && !('pull_request_target' in events)) {
        events['pull_request_target'] = events['pull_request'];
    }
    return context.eventName in events;
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const isTargetEventAction = (action, context, some = true) => {
    if (Array.isArray(action)) {
        if (some) {
            return action.some(item => isTargetEventAction(item, context, false));
        }
        return !action.some(item => !isTargetEventAction(item, context, false));
    }
    if (typeof action === 'function') {
        return action(context);
    }
    return '*' === action || context.payload.action === action;
};
/**
 * @param {object} targets targets
 * @param {Context} context context
 * @param {OptionType} options options
 * @return {boolean} is target event?
 */
const isTargetEvent = (targets, context, options) => // eslint-disable-line @typescript-eslint/no-explicit-any,@typescript-eslint/explicit-module-boundary-types
 getBoolValue(core.getInput('IGNORE_CONTEXT_CHECK')) ||
    (isTargetEventName(targets, context, options) && isTargetEventAction(targets[context.eventName] ?? targets['*'], context));
/**
 * @param {string[]} includes include labels
 * @param {string[]} excludes exclude labels
 * @param {Context} context context
 * @return {boolean} is target labels?
 */
const isTargetLabels = (includes, excludes, context) => {
    const labels = getLabels(context);
    if (false === labels) {
        return false;
    }
    return (!includes.length || !!labels.filter(label => includes.includes(label)).length) && !labels.filter(label => excludes.includes(label)).length;
};

exports.isTargetEvent = isTargetEvent;
exports.isTargetLabels = isTargetLabels;
