import type { Context } from '@actions/github/lib/context';
import type { Logger } from '@technote-space/github-action-log-helper';
declare type CommandType = string | {
    command: string;
    args?: string[];
    quiet?: boolean;
    altCommand?: string;
    suppressError?: boolean;
    suppressOutput?: boolean;
    stderrToStdout?: boolean;
};
export default class GitHelper {
    private readonly logger;
    private readonly command;
    private readonly cloneDepth;
    private readonly filter;
    private readonly token;
    private origin?;
    private quietIfNotOrigin;
    constructor(logger: Logger, options?: {
        depth?: number;
        filter?: (string: string) => boolean;
        token?: string;
    });
    private shouldSuppressError;
    private isQuiet;
    runCommand: (workDir: string, commands: CommandType | CommandType[]) => Promise<{
        command: string;
        stdout: string[];
        stderr: string[];
    }[]>;
    private initialize;
    useOrigin: (origin: string | boolean, quiet?: boolean | undefined) => void;
    getRemoteName: () => string | never;
    private getRemote;
    addOrigin: (workDir: string, context: Context) => Promise<void>;
    getCurrentBranchName: (workDir: string) => Promise<string>;
    cloneBranch: (workDir: string, branch: string, context: Context) => Promise<void>;
    private clonePR;
    clone: (workDir: string, context: Context) => Promise<void>;
    gitInit: (workDir: string, branch: string) => Promise<void>;
    fetchOrigin: (workDir: string, context: Context, options?: string[] | undefined, refspec?: string[] | undefined) => Promise<void>;
    checkout: (workDir: string, context: Context) => Promise<void>;
    fetchBranch: (workDir: string, branch: string, context: Context) => Promise<void>;
    createBranch: (workDir: string, branch: string) => Promise<void>;
    switchBranch: (workDir: string, branch: string) => Promise<void>;
    config: (workDir: string, config: {
        name?: string;
        email?: string;
        defaultBranch?: string;
    }) => Promise<void>;
    getDiff: (workDir: string) => Promise<string[]>;
    getRefDiff: (workDir: string, baseRef: string, compareRef: string, diffFilter?: string | undefined, dot?: ".." | "..." | undefined) => Promise<string[]>;
    checkDiff: (workDir: string) => Promise<boolean>;
    commit: (workDir: string, message: string, options?: {
        count?: number | undefined;
        allowEmpty?: boolean | undefined;
        args?: string[] | undefined;
    } | undefined) => Promise<boolean>;
    makeCommit: (workDir: string, message: string, options?: {
        count?: number | undefined;
        allowEmpty?: boolean | undefined;
        args?: string[] | undefined;
    } | undefined) => Promise<void>;
    getTags: (workDir: string, options?: {
        quiet?: boolean | undefined;
        suppressOutput?: boolean | undefined;
    } | undefined) => Promise<string[]>;
    fetchTags: (workDir: string, context: Context, splitSize?: number) => Promise<void>;
    deleteTag: (workDir: string, tags: string | string[], context: Context, splitSize?: number) => Promise<void>;
    copyTag: (workDir: string, newTag: string, fromTag: string, context: Context) => Promise<void>;
    deleteLocalTag: (workDir: string, tags: string | string[], splitSize?: number) => Promise<void>;
    addLocalTag: (workDir: string, tags: string | string[]) => Promise<void>;
    push: (workDir: string, branch: string, context: Context, options?: {
        withTag?: boolean | undefined;
        force?: boolean | undefined;
        args?: string[] | undefined;
    } | undefined) => Promise<void>;
    forcePush: (workDir: string, branch: string, context: Context) => Promise<void>;
    getLastTag: (workDir: string) => Promise<string>;
    getNewPatchVersion: (workDir: string) => Promise<string>;
    getNewMinorVersion: (workDir: string) => Promise<string>;
    getNewMajorVersion: (workDir: string) => Promise<string>;
}
export {};
